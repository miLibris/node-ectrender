#!/usr/bin/env node
// Generated by CoffeeScript 1.6.3
(function() {
  var ArgumentParser, ECT, cli, context, contextFilePath, e, ectRootPath, fs, json, options, outputFilePath, parsePath, path, renderer, result, rootPath, templateFilePath, _ref, _ref1, _ref2;

  ArgumentParser = require('argparse').ArgumentParser;

  ECT = require('ect');

  path = require("path");

  fs = require("fs");

  cli = new ArgumentParser({
    prog: "ectrender",
    version: require("../package.json").version,
    addHelp: true
  });

  cli.addArgument(["-c", "--context"], {
    help: "Context file path. Can be relative to the current directory or absolute path. Ex: context.json"
  });

  cli.addArgument(["-t", "--template"], {
    help: "Context file path. Can be relative to the current directory or absolute path. Ex: template.ect"
  });

  cli.addArgument(["-o", "--output"], {
    help: "Output file path. Can be relative to the current directory or absolute path. Ex: output.xml"
  });

  options = cli.parseArgs();

  rootPath = process.cwd();

  parsePath = function(input) {
    var output;
    output = void 0;
    if (input == null) {
      return rootPath;
    }
    output = path.normalize(input);
    if (output.length === 0) {
      return rootPath;
    }
    if (output.charAt(0) !== "/") {
      output = path.normalize(rootPath + "/./" + output);
    }
    if (output.length > 1 && output.charAt(output.length - 1) === "/") {
      return output.substr(0, output.length - 1);
    }
    return output;
  };

  if (!((_ref = options.context) != null ? _ref.length : void 0)) {
    process.stderr.write("Missing context file path (--context)\n");
    process.exit(1);
  }

  if (!((_ref1 = options.template) != null ? _ref1.length : void 0)) {
    process.stderr.write("Missing template file path (--template)\n");
    process.exit(2);
  }

  if (!((_ref2 = options.output) != null ? _ref2.length : void 0)) {
    process.stderr.write("Missing output file path (--output)\n");
    process.exit(4);
  }

  contextFilePath = parsePath(options.context);

  templateFilePath = parsePath(options.template);

  outputFilePath = parsePath(options.output);

  if (!contextFilePath) {
    process.stderr.write("Missing context file path (--context)\n");
    process.exit(8);
  }

  try {
    json = fs.readFileSync('' + contextFilePath);
    if (!json) {
      process.stderr.write("File doesn't exist at path: " + contextFilePath + "\n");
      process.exit(16);
    }
    context = JSON.parse(json);
  } catch (_error) {
    e = _error;
    process.stderr.write("Error when parsing context: " + e + "\n");
    process.exit(32);
  }

  ectRootPath = templateFilePath.slice(0, templateFilePath.lastIndexOf('/'));

  renderer = ECT({
    root: ectRootPath
  });

  try {
    result = renderer.render(templateFilePath, context);
  } catch (_error) {
    e = _error;
    process.stderr.write("Error when rendering template: " + e + "\n");
    process.exit(64);
  }

  if (result) {
    try {
      fs.writeFileSync(outputFilePath, result);
      process.stdout.write("Done.\n");
      process.exit(0);
    } catch (_error) {
      e = _error;
      process.stderr.write("Error when writing output: " + e + "\n");
      process.exit(128);
    }
  } else {
    process.stderr.write("Invalid output: " + result + "\n");
    process.exit(256);
  }

}).call(this);
